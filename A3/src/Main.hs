module Main where

import Control.Monad (void)
import Test.QuickCheck
import Test.Hspec
import A3


-- Trees generated for Unit Tests:
test_list_1 = [-26,30,-28,22,-14,9,22]
test_list_2 = [29,-3,23,3,19,-6,11,-1,-1,-18,14,-9,-16,16,-25,22,-2,22,11,10,24,-10,-24,-19,23]
test_list_3 = [17.735233,-26.15796,5.260049,-2.8316004,9.289784]
test_list_4 = [-29.039476,-17.635248,-17.462826,-24.483252,-23.025164,-13.751416,-0.6674188]

test_tree_1 :: A3.Tree Int
test_tree_1 = Node
 (Node
  (Node (Node (Leaf (-15)) (Leaf 6)) (Node (Leaf (-24)) (Leaf (-12))))
  (Node (Node (Leaf (-28)) (Leaf (-22))) (Node (Leaf 28) (Leaf (-7)))))
 (Node
  (Node (Node (Leaf 10) (Leaf (-23))) (Node (Leaf (-4)) (Leaf (-29))))
  (Node (Node (Leaf (-28)) (Leaf (-13))) (Node (Leaf (-19)) (Leaf (-2)))))

test_tree_2 :: A3.Tree Float
test_tree_2 = Node
  (Node
    (Node (Node (Leaf (-7.235776)) (Leaf (-18.856035))) (Node (Leaf 27.711655) (Leaf 26.843462)))
    (Node (Node (Leaf (-17.887796)) (Leaf 19.61016)) (Node (Leaf 24.646938) (Leaf (-12.507795)))))
  (Node
    (Node (Node (Leaf (-3.1620896)) (Leaf 14.178688)) (Node (Leaf (-26.998655)) (Leaf (-17.747755))))
    (Node (Node (Leaf 7.436162) (Leaf (-17.046055))) (Node (Leaf (-7.3804235)) (Leaf 5.682094))))

main:: IO()
main = do
  hspec $ describe "Unit Tests for Applicative Instnce []:" $ do
    specify "Unit tests for `applyAll`" $ do
      A3.applyAll (+) test_list_1 test_list_2 `shouldBe` [3,-29,-3,-23,-7,-32,-15,-27,-27,-44,-12,-35,-42,-10,-51,-4,
        -28,-4,-15,-16,-2,-36,-50,-45,-3,59,27,53,33,49,24,41,29,29,12,44,21,14,46,5,52,28,52,41,40,54,20,6,11,53,
        1,-31,-5,-25,-9,-34,-17,-29,-29,-46,-14,-37,-44,-12,-53,-6,-30,-6,-17,-18,-4,-38,-52,-47,-5,51,19,45,25,41,
        16,33,21,21,4,36,13,6,38,-3,44,20,44,33,32,46,12,-2,3,45,15,-17,9,-11,5,-20,-3,-15,-15,-32,0,-23,-30,2,-39,8,
        -16,8,-3,-4,10,-24,-38,-33,9,38,6,32,12,28,3,20,8,8,-9,23,0,-7,25,-16,31,7,31,20,19,33,-1,-15,-10,32,51,19,45,
        25,41,16,33,21,21,4,36,13,6,38,-3,44,20,44,33,32,46,12,-2,3,45]
      A3.applyAll (+) test_list_3 test_list_4 `shouldBe` [-11.304243,9.998500000000021e-2,0.2724070000000012,
        -6.748018999999999,-5.289930999999999,3.983817,17.0678142,-55.197435999999996,-43.793208,-43.620785999999995,
        -50.641211999999996,-49.183124,-39.909376,-26.8253788,-23.779427,-12.375199,-12.202777,-19.223202999999998,
        -17.765115,-8.491367,4.5926302,-31.8710764,-20.4668484,-20.2944264,-27.3148524,-25.8567644,-16.5830164,
        -3.4990192,-19.749692000000003,-8.345464000000002,-8.173042,-15.193468000000001,-13.735380000000001,
        -4.461632000000002,8.622365199999999]
      A3.applyAll (-) test_list_1 test_list_2 `shouldBe` [-55,-23,-49,-29,-45,-20,-37,-25,-25,-8,-40,-17,-10,-42,-1,
        -48,-24,-48,-37,-36,-50,-16,-2,-7,-49,1,33,7,27,11,36,19,31,31,48,16,39,46,14,55,8,32,8,19,20,6,40,54,49,7,
        -57,-25,-51,-31,-47,-22,-39,-27,-27,-10,-42,-19,-12,-44,-3,-50,-26,-50,-39,-38,-52,-18,-4,-9,-51,-7,25,-1,
        19,3,28,11,23,23,40,8,31,38,6,47,0,24,0,11,12,-2,32,46,41,-1,-43,-11,-37,-17,-33,-8,-25,-13,-13,4,-28,-5,2,
        -30,11,-36,-12,-36,-25,-24,-38,-4,10,5,-37,-20,12,-14,6,-10,15,-2,10,10,27,-5,18,25,-7,34,-13,11,-13,-2,-1,
        -15,19,33,28,-14,-7,25,-1,19,3,28,11,23,23,40,8,31,38,6,47,0,24,0,11,12,-2,32,46,41,-1]
      A3.applyAll (-) test_list_3 test_list_4 `shouldBe` [46.774709,35.370481,35.198059,42.218485,40.760397,31.486649,
        18.4026518,2.8815160000000013,-8.522711999999999,-8.695134,-1.674707999999999,-3.132795999999999,
        -12.406543999999998,-25.4905412,34.299525,22.895297,22.722875000000002,29.743301000000002,
        28.285213,19.011465,5.9274678000000005,26.2078756,14.803647600000001,14.6312256,21.6516516,
        20.1935636,10.9198156,-2.1641816,38.32926,26.925032,26.752609999999997,33.773036,32.314948,23.0412,9.9572028]
    specify "Unit tests for `cartesianProduct`" $ do
      A3.cartesianProduct test_list_1 test_list_2 `shouldBe` [(-26,29),(-26,-3),(-26,23),(-26,3),(-26,19),(-26,-6),
        (-26,11),(-26,-1),(-26,-1),(-26,-18),(-26,14),(-26,-9),(-26,-16),(-26,16),(-26,-25),(-26,22),(-26,-2),(-26,22),
        (-26,11),(-26,10),(-26,24),(-26,-10),(-26,-24),(-26,-19),(-26,23),(30,29),(30,-3),(30,23),(30,3),(30,19),
        (30,-6),(30,11),(30,-1),(30,-1),(30,-18),(30,14),(30,-9),(30,-16),(30,16),(30,-25),(30,22),(30,-2),(30,22),
        (30,11),(30,10),(30,24),(30,-10),(30,-24),(30,-19),(30,23),(-28,29),(-28,-3),(-28,23),(-28,3),(-28,19),
        (-28,-6),(-28,11),(-28,-1),(-28,-1),(-28,-18),(-28,14),(-28,-9),(-28,-16),(-28,16),(-28,-25),(-28,22),
        (-28,-2),(-28,22),(-28,11),(-28,10),(-28,24),(-28,-10),(-28,-24),(-28,-19),(-28,23),(22,29),(22,-3),(22,23),
        (22,3),(22,19),(22,-6),(22,11),(22,-1),(22,-1),(22,-18),(22,14),(22,-9),(22,-16),(22,16),(22,-25),(22,22),
        (22,-2),(22,22),(22,11),(22,10),(22,24),(22,-10),(22,-24),(22,-19),(22,23),(-14,29),(-14,-3),(-14,23),(-14,3),
        (-14,19),(-14,-6),(-14,11),(-14,-1),(-14,-1),(-14,-18),(-14,14),(-14,-9),(-14,-16),(-14,16),(-14,-25),(-14,22),
        (-14,-2),(-14,22),(-14,11),(-14,10),(-14,24),(-14,-10),(-14,-24),(-14,-19),(-14,23),(9,29),(9,-3),(9,23),(9,3),
        (9,19),(9,-6),(9,11),(9,-1),(9,-1),(9,-18),(9,14),(9,-9),(9,-16),(9,16),(9,-25),(9,22),(9,-2),(9,22),(9,11),(
        9,10),(9,24),(9,-10),(9,-24),(9,-19),(9,23),(22,29),(22,-3),(22,23),(22,3),(22,19),(22,-6),(22,11),(22,-1),
        (22,-1),(22,-18),(22,14),(22,-9),(22,-16),(22,16),(22,-25),(22,22),(22,-2),(22,22),(22,11),(22,10),(22,24),
        (22,-10),(22,-24),(22,-19),(22,23)]
      A3.cartesianProduct test_list_3 test_list_4 `shouldBe` [(17.735233,-29.039476),(17.735233,-17.635248),
        (17.735233,-17.462826),(17.735233,-24.483252),(17.735233,-23.025164),(17.735233,-13.751416),
        (17.735233,-0.6674188),(-26.15796,-29.039476),(-26.15796,-17.635248),(-26.15796,-17.462826),
        (-26.15796,-24.483252),(-26.15796,-23.025164),(-26.15796,-13.751416),(-26.15796,-0.6674188),
        (5.260049,-29.039476),(5.260049,-17.635248),(5.260049,-17.462826),(5.260049,-24.483252),
        (5.260049,-23.025164),(5.260049,-13.751416),(5.260049,-0.6674188),(-2.8316004,-29.039476),
        (-2.8316004,-17.635248),(-2.8316004,-17.462826),(-2.8316004,-24.483252),(-2.8316004,-23.025164),
        (-2.8316004,-13.751416),(-2.8316004,-0.6674188),(9.289784,-29.039476),(9.289784,-17.635248),
        (9.289784,-17.462826),(9.289784,-24.483252),(9.289784,-23.025164),(9.289784,-13.751416),(9.289784,-0.6674188)]
    specify "Unit test for `generateLargeProducts`" $ do
      A3.generateLargeProducts 3 [1,2,3] [2,3,4] `shouldBe`  [4,4,6,8,6,9,12]
      A3.generateLargeProducts 0 [1,2,3] [2,3,4] `shouldBe`  [2,3,4,4,6,8,6,9,12]
      A3.generateLargeProducts 3 [] [2,3,4] `shouldBe` []
      A3.generateLargeProducts 3 [1] [4] `shouldBe` [4]
    specify "Unit test for `generateSTudents`" $ do
      A3.generateStudents ["Habib", "Mark"] [1, 2] [10, 20] `shouldBe` [
        MkStudent {name = "Habib", classId = 1, grade = 10},
        MkStudent {name = "Habib", classId = 1, grade = 20},
        MkStudent {name = "Habib", classId = 2, grade = 10},
        MkStudent {name = "Habib", classId = 2, grade = 20},
        MkStudent {name = "Mark", classId = 1, grade = 10},
        MkStudent {name = "Mark", classId = 1, grade = 20},
        MkStudent {name = "Mark", classId = 2, grade = 10},
        MkStudent {name = "Mark", classId = 2, grade = 20}]
  hspec $ describe "Unit Tests for Applicative Instance Tree:" $ do
    specify "Unit tests for `doubleTree`" $ do
      A3.doubleTree (+1) (+3) test_tree_1 `shouldBe` Node
        (Node
          (Node
            (Node (Node (Leaf (-14)) (Leaf 7)) (Node (Leaf (-23)) (Leaf (-11))))
            (Node (Node (Leaf (-27)) (Leaf (-21))) (Node (Leaf 29) (Leaf (-6)))))
          (Node
            (Node (Node (Leaf 11) (Leaf (-22))) (Node (Leaf (-3)) (Leaf (-28))))
            (Node (Node (Leaf (-27)) (Leaf (-12))) (Node (Leaf (-18)) (Leaf (-1))))))
        (Node
          (Node
            (Node (Node (Leaf (-12)) (Leaf 9)) (Node (Leaf (-21)) (Leaf (-9))))
            (Node (Node (Leaf (-25)) (Leaf (-19))) (Node (Leaf 31) (Leaf (-4)))))
          (Node
            (Node (Node (Leaf 13) (Leaf (-20))) (Node (Leaf (-1)) (Leaf (-26))))
            (Node (Node (Leaf (-25)) (Leaf (-10))) (Node (Leaf (-16)) (Leaf 1)))))
      A3.doubleTree (+1) (* 4) test_tree_2 `shouldBe` Node
        (Node
          (Node
            (Node (Node (Leaf (-6.235776)) (Leaf (-17.856035))) (Node (Leaf 28.711655) (Leaf 27.843462)))
            (Node (Node (Leaf (-16.887796)) (Leaf 20.61016)) (Node (Leaf 25.646938) (Leaf (-11.507795)))))
          (Node
            (Node (Node (Leaf (-2.1620896)) (Leaf 15.178688)) (Node (Leaf (-25.998655)) (Leaf (-16.747755))))
            (Node (Node (Leaf 8.436162) (Leaf (-16.046055))) (Node (Leaf (-6.3804235)) (Leaf 6.682094)))))
        (Node
          (Node
            (Node (Node (Leaf (-28.943104)) (Leaf (-75.42414))) (Node (Leaf 110.84662) (Leaf 107.37385)))
            (Node (Node (Leaf (-71.551186)) (Leaf 78.44064)) (Node (Leaf 98.58775) (Leaf (-50.03118)))))
          (Node
            (Node (Node (Leaf (-12.648358)) (Leaf 56.714752)) (Node (Leaf (-107.99462)) (Leaf (-70.99102))))
            (Node (Node (Leaf 29.744648) (Leaf (-68.18422))) (Node (Leaf (-29.521694)) (Leaf 22.728376)))))
    specify "Unit tests for `generateTreesF`" $ do
      A3.generateTreesF [(+1)] test_tree_1 `shouldBe` [
        Node
          (Node
            (Node (Node (Leaf (-14)) (Leaf 7)) (Node (Leaf (-23)) (Leaf (-11))))
            (Node (Node (Leaf (-27)) (Leaf (-21))) (Node (Leaf 29) (Leaf (-6)))))
          (Node
            (Node (Node (Leaf 11) (Leaf (-22))) (Node (Leaf (-3)) (Leaf (-28))))
            (Node (Node (Leaf (-27)) (Leaf (-12))) (Node (Leaf (-18)) (Leaf (-1)))))]
    specify "Unit tests for `generateTreesL`" $ do
      A3.generateTreesL [1,2,3] [6,8,4] `shouldBe` [
        Node (Leaf 1) (Leaf 6),
        Node (Leaf 1) (Leaf 8),
        Node (Leaf 1) (Leaf 4),
        Node (Leaf 2) (Leaf 6),
        Node (Leaf 2) (Leaf 8),
        Node (Leaf 2) (Leaf 4),
        Node (Leaf 3) (Leaf 6),
        Node (Leaf 3) (Leaf 8),
        Node (Leaf 3) (Leaf 4)]
  hspec $ describe "QuickCheck Properties implemented by student:" $ do
    specify "QuickCheck properties" $ property A3.allProps
    
  